from zope.interface import Interface, implements
from plone.dexterity.content import Item
from zope import schema
from plone.app.vulnerabilities import VulnerabilitiesMessageFactory as _
from zope.schema.vocabulary import SimpleVocabulary

ImpactVocabulary = SimpleVocabulary.fromItems([
                        ("None (N)","N",),
                        ("Partial (P)","P"),
                        ("Complete (C)","C")])

ComplexityVocabulary = SimpleVocabulary.fromItems([
                                            ("High (H)","H"),
                                            ("Medium (M)","M",),
                                            ("Low (L)","L")])

AccessVectorVocabulary = SimpleVocabulary.fromItems([
                                        ("Local (L)","L"),
                                        ("Adjacent Network (A)","A"),
                                        ("Network (N)","N")])

AuthenticationVocabulary = SimpleVocabulary.fromItems([
                                         ("Multiple (M)","M"),
                                         ("Single (S)","S",),
                                         ("None (N)","N",)])

class IVulnerability(Interface):
    """ Marker Interface for Vulnerabilities """
    
    
    date = schema.Date(title=_(u"Date reported"),
                       description=_(u"Date this vulnerability was reported"))
    
    author = schema.TextLine(title=_(u"Reporter"),
                             description=_(u"Who found this?"),
                             default=u"Plone Security Team")
    
    summary = schema.Text(title=_(u"Summary"),
                          description=_(u"A short blurb describing the issue"),
                          default=u"")

    details = schema.Text(title=_(u"Details"),
                          description=_(u"Full description of vulnerability"),
                          default=u"")

    # XXX: Original had plone version, we need to decide 
    #      whether to pull this in from PSC (eww) or manually update (also eww)
    # XXX: Original had `sequence_number` - wha?
    # XXX: Original had `cwe` - prepopulated?
    # XXX: Original had temporal stuff from cvss 2 but I got bored moving them over from the xml

    cvss_access_vector = schema.Choice(
                            title=_(u"Access Vector"),
                            description=_(u"This metric reflects how the vulnerability is exploited. The more remote an attacker can be to attack a host, the greater the vulnerability score"),
                            vocabulary=AccessVectorVocabulary)
                                       

    cvss_access_complexity = schema.Choice(
                                title=_(u"Access Complexity"),
                                description=_(u"""This metric measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system. For example, consider a buffer overflow in an Internet service: once the target system is located, the attacker can launch an exploit at will. Other vulnerabilities, however, may require additional steps in order to be exploited. For example, a vulnerability in an email client is only exploited after the user downloads and opens a tainted attachment. The possible values for this metric are listed in Table 2. The lower the required complexity, the higher the vulnerability score."""),
                                vocabulary=ComplexityVocabulary)

    cvss_authentication = schema.Choice(
                             title=_(u"Authentication"),
                             description=_(u"""This metric measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability. This metric does not gauge the strength or complexity of the authentication process, only that an attacker is required to provide credentials before an exploit may occur. The fewer authentication instances that are required, the higher the vulnerability score."""),
                             vocabulary=AuthenticationVocabulary)
                                                        
    cvss_confidentiality_impact = schema.Choice(
                                     title=_(u"Confidentiality Impact"),
                                     description=_(u"""This metric measures the impact on confidentiality of a successfully exploited vulnerability. Confidentiality refers to limiting information access and disclosure to only authorized users, as well as preventing access by, or disclosure to, unauthorized ones. Increased confidentiality impact increases the vulnerability score."""),
                                     vocabulary=ImpactVocabulary)

    cvss_integrity_impact = schema.Choice(
                               title=_(u"Integrity Impact"),
                               description=_(u"""This metric measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and guaranteed veracity of information. Increased integrity impact increases the vulnerability score."""),
                               vocabulary=ImpactVocabulary)

    cvss_availability_impact = schema.Choice(
                                  title=_(u"Availability Impact"),
                                  description=_(u"""This metric measures the impact to availability of a successfully exploited vulnerability. Availability refers to the accessibility of information resources. Attacks that consume network bandwidth, processor cycles, or disk space all impact the availability of a system. Increased availability impact increases the vulnerability score."""),
                                  vocabulary=ImpactVocabulary)

    cvss_exploitability = schema.Choice(
                             title=_(u"Exploitability"),
                             description=_(u"""This metric measures the current state of exploit techniques or code availability. Public availability of easy-to-use exploit code increases the number of potential attackers by including those who are unskilled, thereby increasing the severity of the vulnerability. Initially, real-world exploitation may only be theoretical. Publication of proof of concept code, functional exploit code, or sufficient technical details necessary to exploit the vulnerability may follow. Furthermore, the exploit code available may progress from a proof-of-concept demonstration to exploit code that is successful in exploiting the vulnerability consistently. In severe cases, it may be delivered as the payload of a network-based worm or virus. The more easily a vulnerability can be exploited, the higher the vulnerability score."""),
                             vocabulary=ImpactVocabulary)


class Vulnerability(Item):
    implements(IVulnerability)



